{{
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Maxbotix MB1000 serial read out
//
//
// Author: Stefan Wendler
// Updated: 2014-01-22
// Designed For: P8X32A
// Version: 1.0
//
// Copyright (c) 2014 Stefan Wendler
// See end of file for terms of use.
//
// Update History:
//
// v1.0 - Initial release       - 2014-01-27
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Circuit Diagram:
//
// rxPin        ->              MB1000 TX output
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Brief Description:
//
// Read range from MB1000 ultrasonic range finder in inches or centimeter.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Detailed Description:
//
// For detailed usage, see the example.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}}

CON

  MB1000_BAUD = 9_600                                   ' the baud rate of the MB1000 is fixed at 9600

VAR

  long sin
  long bitTime

PUB init(rxPin) | baud

'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'' // Initialize MB1000
'' //
'' // @param                    rxPin                   Pin which connects to MB1000 TX output
'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  sin      := rxPin & $1F                               ' set rx pin
  bitTime  := clkfreq / MB1000_BAUD                     ' calculate serial bit time

PUB getRangeIn | b1, b2, b3, b4, r

'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'' // Read out current range in inches.
'' //
'' // @return                   current range in inches
'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  repeat until ((b1 := rx) == "R")

  '' read in 3 ASCII digits
  b2 := rx
  b3 := rx
  b4 := rx

  '' dec value of ASCII reading
  r := (b2 - 48) * 100
  r += (b3 - 48) * 10
  r += (b4 - 48)

  return r

PUB getRangeCm | r

'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'' // Read out current range in centimeters.
'' //
'' // @return                   current range in centimeters
'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  r := (getRangeIn * 254) / 100

  return r

PRI rx: rxByte | t

'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'' // Read a single byte from serial line.
'' //
'' // @return                   byte read from serial line
'' ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


  dira[sin]~                                          ' make rx pin an input

  waitpeq($FFFFFFFF & |< sin, |< sin, 0)              ' wait for start bit

  t := cnt + bitTime >> 1                             ' sync + 1/2 bit

  repeat 8
    waitcnt(t += bitTime)                             ' wait for middle of bit
    rxByte := ina[sin] << 7 | rxByte >> 1             ' sample bit

  waitcnt(t + bitTime)                                ' allow for stop bit

  rxByte := (rxByte ^ $FFFFFFFF) & $FF                ' adjust for mode and strip off high bits

DAT

{{
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                  TERMS OF USE: MIT License
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
// Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}}
